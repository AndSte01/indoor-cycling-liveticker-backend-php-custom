{
    "v": 1,
    "name": "dummy_data",
    "folders": [],
    "requests": [
        {
            "headers": [],
            "name": "add user - user 1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "body": "{\n    \"name\": \"<<username1>>\",\n    \"password\": \"<<password1>>\"\n}",
                "contentType": "application/json"
            },
            "method": "POST",
            "auth": {
                "authType": "none",
                "value": "",
                "key": "",
                "authActive": true,
                "addTo": "Headers"
            },
            "v": "1",
            "preRequestScript": "// set username and password in environment\npw.env.set(\"username1\", \"Rashmi\");\npw.env.set(\"password1\", \"Sonam\");",
            "endpoint": "<<url>>/user",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                }
            ]
        },
        {
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "preRequestScript": "// set username and password in environment\npw.env.set(\"username2\", \"Jarka\");\npw.env.set(\"password2\", \"Gust\");",
            "name": "add user - user 2",
            "headers": [],
            "endpoint": "<<url>>/user",
            "auth": {
                "authActive": true,
                "addTo": "Headers",
                "value": "",
                "key": "",
                "authType": "none"
            },
            "v": "1",
            "body": {
                "contentType": "application/json",
                "body": "{\n    \"name\": \"<<username2>>\",\n    \"password\": \"<<password2>>\"\n}"
            },
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                }
            ],
            "method": "POST"
        },
        {
            "v": "1",
            "name": "authenticate - user 1",
            "headers": [],
            "params": [],
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is Bearer token\", () => {\n  pw.expect(pw.response.body).toInclude(\"UmFzaG1p:0:\"); // base 64 encoding of first username\n})\n\n// write bearer token to environment variable\npw.env.set(\"token1\", pw.response.body);",
            "body": {
                "contentType": null,
                "body": null
            },
            "endpoint": "<<url>>/user",
            "auth": {
                "key": "",
                "value": "",
                "authType": "basic",
                "addTo": "Headers",
                "authActive": true,
                "password": "<<password1>>",
                "username": "<<username1>>"
            },
            "method": "GET"
        },
        {
            "auth": {
                "key": "",
                "authActive": true,
                "authType": "basic",
                "username": "<<username2>>",
                "addTo": "Headers",
                "value": "",
                "password": "<<password2>>"
            },
            "headers": [],
            "name": "authenticate - user 2",
            "method": "GET",
            "preRequestScript": "",
            "params": [],
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is Bearer token\", () => {\n  pw.expect(pw.response.body).toInclude(\"SmFya2E=:0:\"); // base 64 encoding of first username\n})\n\n// write bearer token to environment variable\npw.env.set(\"token2\", pw.response.body);",
            "endpoint": "<<url>>/user",
            "body": {
                "body": null,
                "contentType": null
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/competition",
            "name": "add competition - competition 1",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "authActive": true,
                "addTo": "Headers",
                "username": "<<token1>>",
                "value": "",
                "authType": "bearer",
                "token": "<<token1>>"
            },
            "preRequestScript": "let date = new Date();\ndate.setDate(date.getDate() - 3);\npw.env.set(\"date\", date.toISOString().split('T')[0]);",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is id (number)\", () => {\n  pw.expect(pw.response.body.id).toBeType(\"number\");\n})\n\n// write id of competition in environment\npw.env.set(\"competition_id1\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"date\": \"<<date>>\",\n  \"name\": \"Demo Competition 1\",\n  \"location\": \"Demo Location\",\n  \"areas\": 2,\n  \"feature_set\": 4,\n  \"live\": true\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/competition",
            "name": "add competition - competition 2",
            "params": [
                {
                    "value": "add",
                    "key": "method",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "token": "<<token2>>",
                "key": "",
                "username": "<<token1>>",
                "addTo": "Headers",
                "authActive": true,
                "value": "",
                "authType": "bearer"
            },
            "preRequestScript": "let date = new Date();\ndate.setDate(date.getDate() - 1);\npw.env.set(\"date\", date.toISOString().split('T')[0]);",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is id (number)\", () => {\n  pw.expect(pw.response.body.id).toBeType(\"number\");\n})\n\n// write id of competition in environment\npw.env.set(\"competition_id2\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"date\": \"<<date>>\",\n  \"name\": \"Demo Competition 2\",\n  \"location\": \"Demo Location\",\n  \"areas\": 1,\n  \"feature_set\": 4,\n  \"live\": true\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 1 (comp 1)",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                },
                {
                    "active": true,
                    "key": "competition",
                    "value": "<<competition_id1>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "addTo": "Headers",
                "value": "",
                "authType": "bearer",
                "token": "<<token1>>",
                "authActive": true,
                "username": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline1\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id1\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline1\",\n  \"round\": 0,\n  \"area\": 1,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 2 (comp 1)",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                },
                {
                    "value": "<<competition_id1>>",
                    "active": true,
                    "key": "competition"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "value": "",
                "authActive": true,
                "username": "<<token1>>",
                "authType": "bearer",
                "addTo": "Headers",
                "token": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline2\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id2\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline2\",\n  \"round\": 0,\n  \"area\": 2,\n  \"finished\": false\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 3 (comp 2)",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                },
                {
                    "value": "<<competition_id2>>",
                    "key": "competition",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "addTo": "Headers",
                "authActive": true,
                "value": "",
                "username": "<<token1>>",
                "authType": "bearer",
                "token": "<<token2>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline3\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id2\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id3\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline3\",\n  \"round\": 0,\n  \"area\": 1,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 1 (discipline 1)",
            "params": [
                {
                    "value": "add",
                    "active": true,
                    "key": "method"
                },
                {
                    "key": "discipline",
                    "active": true,
                    "value": "<<discipline_id1>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "token": "<<token1>>",
                "authType": "bearer",
                "addTo": "Headers",
                "authActive": true,
                "value": "",
                "key": "",
                "username": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id1\")));\n  pw.expect(pw.response.body.start_number).toBe(101);\n  pw.expect(pw.response.body.name).toBe(\"result1\");\n  pw.expect(pw.response.body.club).toBe(\"def\");\n  pw.expect(pw.response.body.score_submitted).toBe(101.13);\n  pw.expect(pw.response.body.score_accomplished).toBe(85.02);\n  pw.expect(pw.response.body.time).toBe(300);\n  pw.expect(pw.response.body.finished).toBe(true);\n})\n\n// write id in environment\npw.env.set(\"result_id1\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"start_number\": 101,\n  \"name\": \"result1\",\n  \"club\": \"def\",\n  \"score_submitted\": 101.13,\n  \"score_accomplished\": 85.02,\n  \"time\": 300,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 2 (discipline 1)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "value": "<<discipline_id1>>",
                    "key": "discipline"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "addTo": "Headers",
                "token": "<<token1>>",
                "authType": "bearer",
                "authActive": true,
                "username": "<<token1>>",
                "key": "",
                "value": ""
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result2\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id1\")));\n})\n\n// write id in environment\npw.env.set(\"result_id2\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"start_number\": 102,\n  \"name\": \"result2\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": false\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 3 (discipline 2)",
            "params": [
                {
                    "value": "add",
                    "key": "method",
                    "active": true
                },
                {
                    "key": "discipline",
                    "active": true,
                    "value": "<<discipline_id2>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "value": "",
                "authActive": true,
                "key": "",
                "addTo": "Headers",
                "token": "<<token1>>",
                "username": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result3\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id2\")));\n})\n\n// write id in environment\npw.env.set(\"result_id3\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"start_number\": 103,\n  \"name\": \"result3\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 100,\n  \"finished\": false\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 4 (discipline 3)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "key": "discipline",
                    "active": true,
                    "value": "<<discipline_id3>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "authActive": true,
                "username": "<<token1>>",
                "addTo": "Headers",
                "value": "",
                "authType": "bearer",
                "token": "<<token2>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result4\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id3\")));\n})\n\n// write id in environment\npw.env.set(\"result_id4\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"start_number\": 104,\n  \"name\": \"result4\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": true\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 5 (discipline 3)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "key": "discipline",
                    "value": "<<discipline_id3>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "key": "",
                "username": "<<token1>>",
                "value": "",
                "token": "<<token2>>",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result5\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id3\")));\n})\n\n// write id in environment\npw.env.set(\"result_id5\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"start_number\": 105,\n  \"name\": \"result5\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 6 (discipline 3)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "key": "discipline",
                    "value": "<<discipline_id3>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "key": "",
                "username": "<<token1>>",
                "value": "",
                "token": "<<token2>>",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result6\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id3\")));\n})\n\n// write id in environment\npw.env.set(\"result_id6\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"start_number\": 106,\n  \"name\": \"result6\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 7 (discipline 3)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "key": "discipline",
                    "value": "<<discipline_id3>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "key": "",
                "username": "<<token1>>",
                "value": "",
                "token": "<<token2>>",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result7\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id3\")));\n})\n\n// write id in environment\npw.env.set(\"result_id7\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"start_number\": 107,\n  \"name\": \"result7\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 8 (discipline 3)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "key": "discipline",
                    "value": "<<discipline_id3>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "key": "",
                "username": "<<token1>>",
                "value": "",
                "token": "<<token2>>",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result8\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id3\")));\n})\n\n// write id in environment\npw.env.set(\"result_id8\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"start_number\": 108,\n  \"name\": \"result8\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/result",
            "name": "add result - result 9 (discipline 3)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "key": "discipline",
                    "value": "<<discipline_id3>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "key": "",
                "username": "<<token1>>",
                "value": "",
                "token": "<<token2>>",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.name).toBe(\"result9\");\n  pw.expect(pw.response.body.discipline).toBe(parseInt(pw.env.get(\"discipline_id3\")));\n})\n\n// write id in environment\npw.env.set(\"result_id9\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"start_number\": 109,\n  \"name\": \"result9\",\n  \"club\": \"def\",\n  \"score_submitted\": 0,\n  \"score_accomplished\": 0,\n  \"time\": 0,\n  \"finished\": false\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/competition/scoreboard",
            "name": "edit scoreboard - 1",
            "params": [
                {
                    "key": "competition",
                    "value": "<<competition_id1>>",
                    "active": true
                },
                {
                    "key": "method",
                    "value": "edit",
                    "active": true
                },
                {
                    "key": "id",
                    "value": "1",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "token": "<<token1>>",
                "authActive": true,
                "value": "",
                "key": "",
                "authType": "bearer",
                "username": "<<token1>>",
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"content\": -1,\n  \"custom_text\": \"sb1\"\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/competition/scoreboard",
            "name": "edit scoreboard - 2",
            "params": [
                {
                    "key": "competition",
                    "value": "<<competition_id1>>",
                    "active": true
                },
                {
                    "key": "method",
                    "value": "edit",
                    "active": true
                },
                {
                    "key": "id",
                    "value": "2",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "token": "<<token1>>",
                "authActive": true,
                "value": "",
                "key": "",
                "authType": "bearer",
                "username": "<<token1>>",
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"content\": <<result_id3>>\n}"
            }
        }
    ]
}