{
    "name": "disciplines",
    "v": 1,
    "requests": [
        {
            "body": {
                "contentType": "application/json",
                "body": "{\n    \"name\": \"<<username1>>\",\n    \"password\": \"<<password1>>\"\n}"
            },
            "preRequestScript": "// set username and password in environment\npw.env.set(\"username1\", \"Rashmi\");\npw.env.set(\"password1\", \"Sonam\");",
            "headers": [],
            "name": "add user - user 1",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                }
            ],
            "method": "POST",
            "auth": {
                "value": "",
                "authType": "none",
                "key": "",
                "addTo": "Headers",
                "authActive": true
            },
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "endpoint": "<<url>>/user"
        },
        {
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "contentType": "application/json",
                "body": "{\n    \"name\": \"<<username2>>\",\n    \"password\": \"<<password2>>\"\n}"
            },
            "preRequestScript": "// set username and password in environment\npw.env.set(\"username2\", \"Jarka\");\npw.env.set(\"password2\", \"Gust\");",
            "auth": {
                "authType": "none",
                "key": "",
                "addTo": "Headers",
                "authActive": true,
                "value": ""
            },
            "v": "1",
            "headers": [],
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                }
            ],
            "method": "POST",
            "name": "add user - user 2",
            "endpoint": "<<url>>/user"
        },
        {
            "params": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is Bearer token\", () => {\n  pw.expect(pw.response.body).toInclude(\"UmFzaG1p:0:\"); // base 64 encoding of first username\n})\n\n// write bearer token to environment variable\npw.env.set(\"token1\", pw.response.body);",
            "method": "GET",
            "endpoint": "<<url>>/user",
            "v": "1",
            "auth": {
                "password": "<<password1>>",
                "username": "<<username1>>",
                "addTo": "Headers",
                "authType": "basic",
                "authActive": true,
                "value": "",
                "key": ""
            },
            "headers": [],
            "body": {
                "body": null,
                "contentType": null
            },
            "preRequestScript": "",
            "name": "authenticate - user 1"
        },
        {
            "auth": {
                "key": "",
                "authActive": true,
                "addTo": "Headers",
                "username": "<<username2>>",
                "password": "<<password2>>",
                "authType": "basic",
                "value": ""
            },
            "name": "authenticate - user 2",
            "preRequestScript": "",
            "headers": [],
            "method": "GET",
            "params": [],
            "body": {
                "body": null,
                "contentType": null
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is Bearer token\", () => {\n  pw.expect(pw.response.body).toInclude(\"SmFya2E=:0:\"); // base 64 encoding of first username\n})\n\n// write bearer token to environment variable\npw.env.set(\"token2\", pw.response.body);",
            "endpoint": "<<url>>/user",
            "v": "1"
        },
        {
            "params": [
                {
                    "value": "add",
                    "key": "method",
                    "active": true
                }
            ],
            "endpoint": "<<url>>/competition",
            "method": "POST",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is id (number)\", () => {\n  pw.expect(pw.response.body.id).toBeType(\"number\");\n})\n\n// write id of competition in environment\npw.env.set(\"competition_id1\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n   \"date\":\"<<date>>\",\n   \"name\":\"Demo Competition 1\",\n   \"location\":\"Demo Location\",\n   \"areas\":0,\n   \"feature_set\":4,\n   \"live\":true\n}",
                "contentType": "application/json"
            },
            "headers": [],
            "name": "add competition - competition 1",
            "v": "1",
            "preRequestScript": "let date = new Date();\ndate.setDate(date.getDate() - 3);\npw.env.set(\"date\", date.toISOString().split('T')[0]);",
            "auth": {
                "key": "",
                "username": "<<token1>>",
                "value": "",
                "token": "<<token1>>",
                "addTo": "Headers",
                "authType": "bearer",
                "authActive": true
            }
        },
        {
            "name": "add competition - competition 2",
            "headers": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is id (number)\", () => {\n  pw.expect(pw.response.body.id).toBeType(\"number\");\n})\n\n// write id of competition in environment\npw.env.set(\"competition_id2\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n   \"date\":\"<<date>>\",\n   \"name\":\"Demo Competition 2\",\n   \"location\":\"Demo Location\",\n   \"areas\":0,\n   \"feature_set\":4,\n   \"live\":true\n}"
            },
            "endpoint": "<<url>>/competition",
            "method": "POST",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                }
            ],
            "v": "1",
            "preRequestScript": "let date = new Date();\ndate.setDate(date.getDate() - 1);\npw.env.set(\"date\", date.toISOString().split('T')[0]);",
            "auth": {
                "authActive": true,
                "value": "",
                "token": "<<token2>>",
                "username": "<<token1>>",
                "key": "",
                "authType": "bearer",
                "addTo": "Headers"
            }
        },
        {
            "auth": {
                "addTo": "Headers",
                "key": "",
                "value": "",
                "authType": "bearer",
                "authActive": true,
                "token": "<<token2>>",
                "username": "<<token1>>"
            },
            "endpoint": "<<url>>/discipline",
            "headers": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"MISSING_INFORMATION\");\n})",
            "v": "1",
            "name": "add discipline - no competition",
            "method": "POST",
            "body": {
                "body": "{\n  \"id\": 1,\n  \"competition\": 1,\n  \"type\": -1,\n  \"fallback_name\": \"discipline1\",\n  \"round\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            },
            "preRequestScript": "",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                }
            ]
        },
        {
            "method": "POST",
            "preRequestScript": "",
            "endpoint": "<<url>>/discipline",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                },
                {
                    "active": true,
                    "key": "competition",
                    "value": "-1"
                }
            ],
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"id\": 1,\n  \"competition\": 1,\n  \"type\": -1,\n  \"fallback_name\": \"discipline1\",\n  \"round\": 0,\n  \"finished\": true\n}"
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"NOT_EXISTING\");\n})",
            "name": "add discipline - not existing competition",
            "headers": [],
            "v": "1",
            "auth": {
                "key": "",
                "authType": "bearer",
                "token": "<<token2>>",
                "authActive": true,
                "value": "",
                "addTo": "Headers",
                "username": "<<token1>>"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 1 (comp 1)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "active": true,
                    "key": "competition",
                    "value": "<<competition_id1>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "value": "",
                "token": "<<token1>>",
                "key": "",
                "authType": "bearer",
                "username": "<<token1>>",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline1\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id1\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline1\",\n  \"area\": 1,\n  \"round\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 2 (comp 1)",
            "params": [
                {
                    "key": "method",
                    "value": "add",
                    "active": true
                },
                {
                    "key": "competition",
                    "value": "<<competition_id1>>",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "value": "",
                "authActive": true,
                "username": "<<token1>>",
                "authType": "bearer",
                "addTo": "Headers",
                "key": "",
                "token": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline2\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id2\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline2\",\n  \"area\": 1,\n  \"round\": 0,\n  \"finished\": false\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 3 (comp 2)",
            "params": [
                {
                    "active": true,
                    "value": "add",
                    "key": "method"
                },
                {
                    "key": "competition",
                    "value": "<<competition_id2>>",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "username": "<<token1>>",
                "addTo": "Headers",
                "key": "",
                "authType": "bearer",
                "value": "",
                "authActive": true,
                "token": "<<token2>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline3\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id2\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id3\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline3\",\n  \"area\": 1,\n  \"round\": 0,\n  \"finished\": true\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - discipline 4 (comp 2)",
            "params": [
                {
                    "key": "method",
                    "value": "add",
                    "active": true
                },
                {
                    "value": "<<competition_id2>>",
                    "active": true,
                    "key": "competition"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "addTo": "Headers",
                "authType": "bearer",
                "token": "<<token2>>",
                "authActive": true,
                "value": "",
                "key": "",
                "username": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline4\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id2\")));\n})\n\n// write id in environment\npw.env.set(\"discipline_id4\", pw.response.body.id.toString());",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline4\",\n  \"area\": 1,\n  \"round\": 0,\n  \"finished\": true\n}"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - allready existing (discipline 2 comp 1)",
            "params": [
                {
                    "value": "add",
                    "active": true,
                    "key": "method"
                },
                {
                    "key": "competition",
                    "value": "<<competition_id1>>",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authActive": true,
                "token": "<<token1>>",
                "key": "",
                "authType": "bearer",
                "value": "",
                "username": "<<token1>>",
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.id).toBe(parseInt(pw.env.get(\"discipline_id2\")));\n})",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline2\",\n  \"area\": 1,\n  \"round\": 0,\n  \"finished\": true\n}"
            }
        },
        {
            "name": "add discipline - invalid JSON",
            "preRequestScript": "",
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "method": "POST",
            "auth": {
                "key": "",
                "value": "",
                "authActive": true,
                "addTo": "Headers",
                "username": "<<token1>>",
                "authType": "bearer",
                "token": "<<token1>>"
            },
            "headers": [],
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline2\",\n  \"round\": 0,\n  \"finished\": true,\n}",
                "contentType": "application/json"
            },
            "params": [
                {
                    "key": "method",
                    "value": "add",
                    "active": true
                },
                {
                    "active": true,
                    "value": "<<competition_id1>>",
                    "key": "competition"
                }
            ],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"INVALID_JSON\");\n})"
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - invalid type (create discipline 5, comp 1)",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                },
                {
                    "value": "<<competition_id1>>",
                    "active": true,
                    "key": "competition"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "value": "",
                "username": "<<token1>>",
                "authType": "bearer",
                "addTo": "Headers",
                "authActive": true,
                "token": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline5\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n  pw.expect(pw.response.body.type).toBe(-1);\n})\n\n// write id in environment\npw.env.set(\"discipline_id5\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": 0,\n  \"fallback_name\": \"discipline5\",\n  \"area\": 1,\n  \"round\": 0,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - invalid round (create discipline 6, comp 1)",
            "params": [
                {
                    "value": "add",
                    "key": "method",
                    "active": true
                },
                {
                    "value": "<<competition_id1>>",
                    "key": "competition",
                    "active": true
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "key": "",
                "authType": "bearer",
                "authActive": true,
                "value": "",
                "addTo": "Headers",
                "token": "<<token1>>",
                "username": "<<token1>>"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline6\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n  pw.expect(pw.response.body.round).toBe(0);\n})\n\n// write id in environment\npw.env.set(\"discipline_id6\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline6\",\n  \"area\": 1,\n  \"round\": -2,\n  \"finished\": true\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - invalid finished (create discipline 7, comp 1)",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                },
                {
                    "active": true,
                    "key": "competition",
                    "value": "<<competition_id1>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "token": "<<token1>>",
                "value": "",
                "addTo": "Headers",
                "username": "<<token1>>",
                "key": "",
                "authType": "bearer",
                "authActive": true
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline7\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n  pw.expect(pw.response.body.finished).toBe(false);\n})\n\n// write id in environment\npw.env.set(\"discipline_id7\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline7\",\n  \"area\": 1,\n  \"round\": -2,\n  \"finished\": -1\n}",
                "contentType": "application/json"
            }
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "add discipline - invalid area (create discipline 8, comp 1)",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "add"
                },
                {
                    "active": true,
                    "key": "competition",
                    "value": "<<competition_id1>>"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "token": "<<token1>>",
                "value": "",
                "addTo": "Headers",
                "username": "<<token1>>",
                "key": "",
                "authType": "bearer",
                "authActive": true
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline8\");\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n  pw.expect(pw.response.body.area).toBe(1);\n})\n\n// write id in environment\npw.env.set(\"discipline_id8\", pw.response.body.id.toString());",
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline8\",\n  \"area\": -1,\n  \"round\": -2,\n  \"finished\": -1\n}",
                "contentType": "application/json"
            }
        },
        {
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "add"
                },
                {
                    "active": true,
                    "key": "competition",
                    "value": "<<competition_id1>>"
                }
            ],
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline7\",\n  \"round\": -2,\n  \"finished\": -1\n}"
            },
            "auth": {
                "authActive": true,
                "key": "",
                "username": "<<token1>>",
                "authType": "bearer",
                "value": "",
                "token": "<<token2>>",
                "addTo": "Headers"
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"ACCESS_DENIED\");\n})",
            "endpoint": "<<url>>/discipline",
            "preRequestScript": "",
            "v": "1",
            "method": "POST",
            "headers": [],
            "name": "add discipline - access denied"
        },
        {
            "auth": {
                "addTo": "Headers",
                "authActive": true,
                "authType": "bearer",
                "key": "",
                "value": "",
                "token": "<<token2>>",
                "username": "<<token1>>"
            },
            "body": {
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline7\",\n  \"round\": -2,\n  \"finished\": -1\n}",
                "contentType": "application/json"
            },
            "method": "POST",
            "headers": [],
            "endpoint": "<<url>>/discipline",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"MISSING_INFORMATION\");\n})",
            "params": [
                {
                    "value": "edit",
                    "key": "method",
                    "active": true
                }
            ],
            "name": "edit discipline - no id",
            "v": "1",
            "preRequestScript": ""
        },
        {
            "params": [
                {
                    "key": "method",
                    "value": "edit",
                    "active": true
                },
                {
                    "value": "-1",
                    "active": true,
                    "key": "id"
                }
            ],
            "headers": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"NOT_EXISTING\");\n})",
            "auth": {
                "authType": "bearer",
                "token": "<<token2>>",
                "value": "",
                "authActive": true,
                "key": "",
                "username": "<<token1>>",
                "addTo": "Headers"
            },
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"type\": -1,\n  \"fallback_name\": \"discipline7\",\n  \"round\": -2,\n  \"finished\": -1\n}"
            },
            "preRequestScript": "",
            "name": "edit discipline - not existing id",
            "method": "POST",
            "endpoint": "<<url>>/discipline",
            "v": "1"
        },
        {
            "endpoint": "<<url>>/discipline",
            "name": "edit discipline - no fields",
            "method": "POST",
            "params": [
                {
                    "key": "method",
                    "value": "edit",
                    "active": true
                },
                {
                    "value": "<<discipline_id1>>",
                    "key": "id",
                    "active": true
                }
            ],
            "auth": {
                "authType": "bearer",
                "username": "<<token1>>",
                "authActive": true,
                "token": "<<token1>>",
                "key": "",
                "value": "",
                "addTo": "Headers"
            },
            "body": {
                "contentType": "application/json",
                "body": "{}"
            },
            "headers": [],
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "preRequestScript": ""
        },
        {
            "method": "POST",
            "endpoint": "<<url>>/discipline",
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "edit"
                },
                {
                    "key": "id",
                    "value": "<<discipline_id1>>",
                    "active": true
                }
            ],
            "auth": {
                "username": "<<token1>>",
                "authType": "bearer",
                "authActive": true,
                "token": "<<token2>>",
                "addTo": "Headers",
                "value": "",
                "key": ""
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"ACCESS_DENIED\");\n})",
            "name": "edit discipline - access denied",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"fallback_name\": \"discipline1.1\"\n}"
            },
            "headers": [],
            "preRequestScript": "",
            "v": "1"
        },
        {
            "method": "POST",
            "headers": [],
            "params": [
                {
                    "value": "edit",
                    "active": true,
                    "key": "method"
                },
                {
                    "value": "<<discipline_id1>>",
                    "active": true,
                    "key": "id"
                }
            ],
            "name": "edit discipline - edit fallback_name (discipline1)",
            "auth": {
                "authType": "bearer",
                "authActive": true,
                "key": "",
                "value": "",
                "username": "<<token1>>",
                "token": "<<token1>>",
                "addTo": "Headers"
            },
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "body": "{\n  \"fallback_name\": \"discipline1.2\"\n}",
                "contentType": "application/json"
            },
            "endpoint": "<<url>>/discipline",
            "preRequestScript": ""
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "edit discipline - edit area (discipline1)",
            "params": [
                {
                    "value": "edit",
                    "active": true,
                    "key": "method"
                },
                {
                    "value": "<<discipline_id1>>",
                    "active": true,
                    "key": "id"
                }
            ],
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "authActive": true,
                "key": "",
                "value": "",
                "username": "<<token1>>",
                "token": "<<token1>>",
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "body": "{\n  \"area\": 2\n}",
                "contentType": "application/json"
            }
        },
        {
            "params": [
                {
                    "key": "method",
                    "active": true,
                    "value": "edit"
                },
                {
                    "key": "id",
                    "value": "<<discipline_id1>>",
                    "active": true
                }
            ],
            "name": "edit discipline - edit round (discipline 1)",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "v": "1",
            "headers": [],
            "preRequestScript": "",
            "auth": {
                "token": "<<token1>>",
                "key": "",
                "username": "<<token1>>",
                "authActive": true,
                "value": "",
                "authType": "bearer",
                "addTo": "Headers"
            },
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"round\": 2\n}"
            },
            "endpoint": "<<url>>/discipline",
            "method": "POST"
        },
        {
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "edit"
                },
                {
                    "key": "id",
                    "active": true,
                    "value": "<<discipline_id1>>"
                }
            ],
            "name": "edit discipline - edit type (discipline 1)",
            "endpoint": "<<url>>/discipline",
            "headers": [],
            "method": "POST",
            "auth": {
                "authType": "bearer",
                "key": "",
                "username": "<<token1>>",
                "authActive": true,
                "token": "<<token1>>",
                "value": "",
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "contentType": "application/json",
                "body": "{\n  \"type\": 29\n}"
            },
            "v": "1"
        },
        {
            "headers": [],
            "v": "1",
            "name": "edit discipline - edit finished (discipline 1)",
            "body": {
                "body": "{\n  \"finished\": false\n}",
                "contentType": "application/json"
            },
            "method": "POST",
            "auth": {
                "key": "",
                "value": "",
                "token": "<<token1>>",
                "addTo": "Headers",
                "authType": "bearer",
                "authActive": true,
                "username": "<<token1>>"
            },
            "preRequestScript": "",
            "endpoint": "<<url>>/discipline",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "params": [
                {
                    "value": "edit",
                    "active": true,
                    "key": "method"
                },
                {
                    "value": "<<discipline_id1>>",
                    "active": true,
                    "key": "id"
                }
            ]
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "edit discipline - check fields",
            "params": [
                {
                    "active": true,
                    "value": "<<discipline_id1>>",
                    "key": "id"
                }
            ],
            "headers": [],
            "method": "GET",
            "auth": {
                "username": "<<token1>>",
                "key": "",
                "value": "",
                "authActive": true,
                "token": "<<token1>>",
                "addTo": "Headers",
                "authType": "none"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.id).toBe(parseInt(pw.env.get(\"discipline_id1\")));\n  pw.expect(pw.response.body.competition).toBe(parseInt(pw.env.get(\"competition_id1\")));\n  pw.expect(pw.response.body.type).toBe(29);\n  pw.expect(pw.response.body.fallback_name).toBe(\"discipline1.2\");\n  pw.expect(pw.response.body.area).toBe(2);\n})",
            "body": {
                "body": null,
                "contentType": null
            }
        },
        {
            "body": {
                "body": null,
                "contentType": null
            },
            "preRequestScript": "",
            "params": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"MISSING_INFORMATION\");\n})",
            "headers": [],
            "v": "1",
            "auth": {
                "value": "",
                "authActive": true,
                "authType": "none",
                "key": "",
                "addTo": "Headers",
                "token": "<<token1>>",
                "username": "<<token1>>"
            },
            "name": "get discipline - no competition or id",
            "method": "GET",
            "endpoint": "<<url>>/discipline"
        },
        {
            "endpoint": "<<url>>/discipline",
            "params": [
                {
                    "value": "<<discipline_id1>>",
                    "active": true,
                    "key": "id"
                }
            ],
            "v": "1",
            "preRequestScript": "",
            "body": {
                "body": null,
                "contentType": null
            },
            "method": "GET",
            "name": "get discipline - by id",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.id).toBe(parseInt(pw.env.get(\"discipline_id1\")));\n})",
            "auth": {
                "token": "<<token1>>",
                "authType": "none",
                "authActive": true,
                "value": "",
                "addTo": "Headers",
                "username": "<<token1>>",
                "key": ""
            },
            "headers": []
        },
        {
            "headers": [],
            "params": [
                {
                    "active": true,
                    "key": "competition",
                    "value": "<<competition_id1>>"
                }
            ],
            "method": "GET",
            "auth": {
                "username": "<<token1>>",
                "addTo": "Headers",
                "token": "<<token1>>",
                "authActive": true,
                "key": "",
                "authType": "none",
                "value": ""
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body.length).toBe(6);\n})",
            "preRequestScript": "",
            "endpoint": "<<url>>/discipline",
            "name": "get discipline - by competition (comp 1)",
            "v": "1",
            "body": {
                "body": null,
                "contentType": null
            }
        },
        {
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"MISSING_INFORMATION\");\n})",
            "auth": {
                "username": "<<token1>>",
                "authType": "bearer",
                "key": "",
                "authActive": true,
                "value": "",
                "token": "<<token1>>",
                "addTo": "Headers"
            },
            "endpoint": "<<url>>/discipline",
            "v": "1",
            "method": "GET",
            "preRequestScript": "",
            "params": [
                {
                    "value": "remove",
                    "key": "method",
                    "active": true
                }
            ],
            "name": "remove discipline - no id",
            "body": {
                "contentType": null,
                "body": null
            },
            "headers": []
        },
        {
            "headers": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"ACCESS_DENIED\");\n})",
            "auth": {
                "authType": "bearer",
                "username": "<<token1>>",
                "addTo": "Headers",
                "token": "<<token2>>",
                "authActive": true,
                "key": "",
                "value": ""
            },
            "preRequestScript": "",
            "endpoint": "<<url>>/discipline",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "remove"
                },
                {
                    "value": "<<discipline_id1>>",
                    "key": "id",
                    "active": true
                }
            ],
            "v": "1",
            "method": "GET",
            "body": {
                "contentType": null,
                "body": null
            },
            "name": "remove discipline - access denied"
        },
        {
            "endpoint": "<<url>>/discipline",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "remove"
                },
                {
                    "key": "id",
                    "value": "<<discipline_id1>>",
                    "active": true
                }
            ],
            "auth": {
                "key": "",
                "authActive": true,
                "username": "<<token1>>",
                "token": "<<token1>>",
                "value": "",
                "authType": "bearer",
                "addTo": "Headers"
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "contentType": null,
                "body": null
            },
            "v": "1",
            "preRequestScript": "",
            "method": "GET",
            "headers": [],
            "name": "remove discipline - discipline 1 (comp 1)"
        },
        {
            "auth": {
                "authType": "bearer",
                "key": "",
                "addTo": "Headers",
                "username": "<<token1>>",
                "authActive": true,
                "value": "",
                "token": "<<token1>>"
            },
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "preRequestScript": "",
            "headers": [],
            "body": {
                "contentType": null,
                "body": null
            },
            "endpoint": "<<url>>/discipline",
            "name": "remove discipline - discipline 2 (comp 1)",
            "params": [
                {
                    "key": "method",
                    "value": "remove",
                    "active": true
                },
                {
                    "active": true,
                    "key": "id",
                    "value": "<<discipline_id2>>"
                }
            ],
            "method": "GET",
            "v": "1"
        },
        {
            "params": [
                {
                    "active": true,
                    "value": "remove",
                    "key": "method"
                },
                {
                    "active": true,
                    "value": "<<discipline_id3>>",
                    "key": "id"
                }
            ],
            "body": {
                "contentType": null,
                "body": null
            },
            "name": "remove discipline - discipline 3 (comp 2)",
            "headers": [],
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "preRequestScript": "",
            "method": "GET",
            "auth": {
                "token": "<<token2>>",
                "key": "",
                "addTo": "Headers",
                "value": "",
                "authType": "bearer",
                "authActive": true,
                "username": "<<token1>>"
            },
            "endpoint": "<<url>>/discipline"
        },
        {
            "headers": [],
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "remove"
                },
                {
                    "active": true,
                    "value": "<<discipline_id4>>",
                    "key": "id"
                }
            ],
            "name": "remove discipline - discipline 4 (comp 2)",
            "auth": {
                "addTo": "Headers",
                "username": "<<token1>>",
                "key": "",
                "authActive": true,
                "token": "<<token2>>",
                "authType": "bearer",
                "value": ""
            },
            "preRequestScript": "",
            "endpoint": "<<url>>/discipline",
            "body": {
                "contentType": null,
                "body": null
            },
            "v": "1",
            "method": "GET",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})"
        },
        {
            "params": [
                {
                    "value": "remove",
                    "key": "method",
                    "active": true
                },
                {
                    "key": "id",
                    "active": true,
                    "value": "<<discipline_id5>>"
                }
            ],
            "endpoint": "<<url>>/discipline",
            "v": "1",
            "method": "GET",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "contentType": null,
                "body": null
            },
            "preRequestScript": "",
            "headers": [],
            "auth": {
                "username": "<<token1>>",
                "token": "<<token1>>",
                "authType": "bearer",
                "value": "",
                "key": "",
                "addTo": "Headers",
                "authActive": true
            },
            "name": "remove discipline - discipline 5 (comp 1)"
        },
        {
            "auth": {
                "username": "<<token1>>",
                "value": "",
                "authType": "bearer",
                "token": "<<token1>>",
                "key": "",
                "authActive": true,
                "addTo": "Headers"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "v": "1",
            "headers": [],
            "method": "GET",
            "endpoint": "<<url>>/discipline",
            "params": [
                {
                    "value": "remove",
                    "active": true,
                    "key": "method"
                },
                {
                    "active": true,
                    "value": "<<discipline_id6>>",
                    "key": "id"
                }
            ],
            "name": "remove discipline - discipline 6 (comp 1)",
            "body": {
                "contentType": null,
                "body": null
            }
        },
        {
            "params": [
                {
                    "key": "method",
                    "value": "remove",
                    "active": true
                },
                {
                    "key": "id",
                    "value": "<<discipline_id7>>",
                    "active": true
                }
            ],
            "preRequestScript": "",
            "v": "1",
            "body": {
                "body": null,
                "contentType": null
            },
            "endpoint": "<<url>>/discipline",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "method": "GET",
            "headers": [],
            "auth": {
                "token": "<<token1>>",
                "key": "",
                "addTo": "Headers",
                "username": "<<token1>>",
                "value": "",
                "authActive": true,
                "authType": "bearer"
            },
            "name": "remove discipline - discipline 7 (comp 1)"
        },
        {
            "v": "1",
            "endpoint": "<<url>>/discipline",
            "name": "remove discipline - discipline 8 (comp 1)",
            "params": [
                {
                    "key": "method",
                    "value": "remove",
                    "active": true
                },
                {
                    "key": "id",
                    "value": "<<discipline_id8>>",
                    "active": true
                }
            ],
            "headers": [],
            "method": "GET",
            "auth": {
                "token": "<<token1>>",
                "key": "",
                "addTo": "Headers",
                "username": "<<token1>>",
                "value": "",
                "authActive": true,
                "authType": "bearer"
            },
            "preRequestScript": "",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "body": {
                "body": null,
                "contentType": null
            }
        },
        {
            "body": {
                "body": null,
                "contentType": null
            },
            "name": "remove discipline - not existing (discipline 7, comp 1)",
            "method": "GET",
            "auth": {
                "addTo": "Headers",
                "authType": "bearer",
                "authActive": true,
                "token": "<<token1>>",
                "username": "<<token1>>",
                "key": "",
                "value": ""
            },
            "v": "1",
            "preRequestScript": "",
            "endpoint": "<<url>>/discipline",
            "headers": [],
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(400);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"NOT_EXISTING\");\n})",
            "params": [
                {
                    "value": "remove",
                    "active": true,
                    "key": "method"
                },
                {
                    "value": "<<discipline_id7>>",
                    "active": true,
                    "key": "id"
                }
            ]
        },
        {
            "params": [
                {
                    "value": "remove",
                    "active": true,
                    "key": "method"
                },
                {
                    "key": "id",
                    "value": "<<competition_id1>>",
                    "active": true
                }
            ],
            "headers": [],
            "auth": {
                "token": "<<token1>>",
                "authActive": true,
                "key": "",
                "username": "<<token1>>",
                "addTo": "Headers",
                "authType": "bearer",
                "value": ""
            },
            "method": "GET",
            "preRequestScript": "",
            "v": "1",
            "endpoint": "<<url>>/competition",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})\n",
            "name": "remove competition - competition 1",
            "body": {
                "contentType": null,
                "body": null
            }
        },
        {
            "preRequestScript": "",
            "name": "remove competition - competition 2",
            "headers": [],
            "body": {
                "contentType": null,
                "body": null
            },
            "auth": {
                "key": "",
                "addTo": "Headers",
                "authType": "bearer",
                "token": "<<token2>>",
                "value": "",
                "username": "<<token1>>",
                "authActive": true
            },
            "endpoint": "<<url>>/competition",
            "method": "GET",
            "params": [
                {
                    "active": true,
                    "value": "remove",
                    "key": "method"
                },
                {
                    "key": "id",
                    "active": true,
                    "value": "<<competition_id2>>"
                }
            ],
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})\n"
        },
        {
            "name": "remove - user 1",
            "headers": [],
            "body": {
                "body": null,
                "contentType": null
            },
            "auth": {
                "authType": "basic",
                "key": "",
                "username": "<<username1>>",
                "addTo": "Headers",
                "value": "",
                "authActive": true,
                "password": "<<password1>>"
            },
            "v": "1",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})",
            "endpoint": "<<url>>/user",
            "method": "GET",
            "preRequestScript": "",
            "params": [
                {
                    "active": true,
                    "value": "remove",
                    "key": "method"
                }
            ]
        },
        {
            "endpoint": "<<url>>/user",
            "headers": [],
            "method": "GET",
            "params": [
                {
                    "active": true,
                    "key": "method",
                    "value": "remove"
                }
            ],
            "body": {
                "body": null,
                "contentType": null
            },
            "auth": {
                "addTo": "Headers",
                "authActive": true,
                "password": "<<password2>>",
                "value": "",
                "username": "<<username2>>",
                "authType": "basic",
                "key": ""
            },
            "v": "1",
            "preRequestScript": "",
            "name": "remove - user 2",
            "testScript": "// Check status code is correct\npw.test(\"Status code is correct\", ()=> {\n  pw.expect(pw.response.status).toBe(200);\n});\n\n// check for correct return\npw.test(\"Return is JSON and contains correct data\", () => {\n  pw.expect(pw.response.body[0]).toBe(\"SUCCESS\");\n})"
        }
    ],
    "folders": []
}